{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeTaskAction = exports.DELETE_TASK = exports.addTaskAction = exports.ADD_TASK = exports.fetchTasksAction = exports.FETCH_TASKS = void 0;\n\nvar _slug = _interopRequireDefault(require(\"slug\"));\n\nvar _firebase = require(\"firebase\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar taskRef = '/tasks/';\nvar FETCH_TASKS = 'tasks/FETCH_TASKS';\nexports.FETCH_TASKS = FETCH_TASKS;\n\nvar fetchTasksAction = function fetchTasksAction() {\n  return function (dispatch) {\n    try {\n      var ref = (0, _firebase.database)().ref(taskRef);\n      var onValueChange = ref.on('value', function (snapshot) {\n        dispatch({\n          type: FETCH_TASKS,\n          tasks: snapshot.val() ? Object.values(snapshot.val()) : []\n        });\n      });\n      return function () {\n        return ref.off('value', onValueChange);\n      };\n    } catch (error) {\n      console.error(error);\n      return Promise.resolve();\n    }\n  };\n};\n\nexports.fetchTasksAction = fetchTasksAction;\nvar ADD_TASK = 'tasks/ADD_TASK';\nexports.ADD_TASK = ADD_TASK;\n\nvar addTaskAction = function addTaskAction(task) {\n  return function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(dispatch) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return (0, _firebase.database)().ref(taskRef + (0, _slug.default)(task._id)).set(task);\n\n            case 3:\n              _context.next = 5;\n              return dispatch({\n                type: ADD_TASK\n              });\n\n            case 5:\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexports.addTaskAction = addTaskAction;\nvar DELETE_TASK = 'tasks/DELETE_TASK';\nexports.DELETE_TASK = DELETE_TASK;\n\nvar removeTaskAction = function removeTaskAction(taskId) {\n  return function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(dispatch) {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return (0, _firebase.database)().ref(taskRef + taskId).remove();\n\n            case 3:\n              _context2.next = 5;\n              return dispatch({\n                type: DELETE_TASK\n              });\n\n            case 5:\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(_context2.t0);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\n\nexports.removeTaskAction = removeTaskAction;","map":null,"metadata":{},"sourceType":"script"}