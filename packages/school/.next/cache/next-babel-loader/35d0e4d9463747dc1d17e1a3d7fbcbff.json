{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport { database as firebase } from 'firebase';\nimport moment from 'moment';\nimport { getSchoolYear } from '../school/school.selectors';\nmoment.locale('fr');\nconst dateRef = '/dates/';\nconst weeksRef = '/weeks/';\nexport const FETCH_DATES = 'calendar/FETCH_DATES';\nexport const fetchDatesAction = function () {\n  return function (dispatch) {\n    try {\n      const ref = firebase().ref(dateRef).orderByChild('timestamp').startAt(moment().startOf('week').unix() / 1000);\n      const onValueChange = ref.on('value', function (snapshot) {\n        const dates = [];\n        snapshot.forEach(function (childSnapshot) {\n          dates.push(childSnapshot.val());\n        });\n        dispatch({\n          type: FETCH_DATES,\n          dates\n        });\n      });\n      return function () {\n        return ref.off('value', onValueChange);\n      };\n    } catch (error) {\n      // eslint-disable-next-line\n      console.error(error);\n      return _Promise.resolve();\n    }\n  };\n};\nexport const ADD_DATE = 'calendar/ADD_DATE';\nexport const addDateAction = function (date) {\n  return async function (dispatch) {\n    try {\n      await firebase().ref(dateRef + date._id).set(date);\n      await dispatch({\n        type: ADD_DATE\n      });\n    } catch (error) {\n      // eslint-disable-next-line\n      console.error(error);\n    }\n  };\n};\nexport const EDIT_DATE = 'calendar/EDIT_DATE';\nexport const editDateAction = function (date) {\n  return async function (dispatch) {\n    try {\n      await firebase().ref(dateRef + date._id).set(date);\n      await dispatch({\n        type: EDIT_DATE\n      });\n    } catch (error) {\n      // eslint-disable-next-line\n      console.error(error);\n    }\n  };\n};\nexport const FETCH_WEEK = 'calendar/FETCH_WEEK';\nexport const fetchWeekAction = function (date) {\n  return function (dispatch) {\n    try {\n      firebase().ref(weeksRef).orderByChild('date').equalTo(date || moment().startOf('week').format('YYYY.MM.DD')).on('value', function (snapshot) {\n        const week = snapshot.val();\n\n        if (week) {\n          dispatch({\n            type: FETCH_WEEK,\n            week: week[_Object$keys(week)[0]]\n          });\n        }\n      });\n    } catch (error) {\n      // eslint-disable-next-line\n      console.error(error);\n    }\n  };\n};\nexport const ADD_WEEK = 'calendar/ADD_WEEK';\nexport const addWeekAction = function (date) {\n  return async function (dispatch, getState) {\n    try {\n      await firebase().ref(weeksRef).push().set({\n        date,\n        schoolYear: getSchoolYear(getState())\n      });\n      await dispatch({\n        type: ADD_WEEK\n      });\n    } catch (error) {\n      // eslint-disable-next-line\n      console.error(error);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}