{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport { database as firebase } from 'firebase';\nimport { getSchoolYear } from '../school/school.selectors';\nconst taskRef = '/classes/';\nexport const FETCH_CLASSES = 'classes/FETCH_CLASSES';\nexport const fetchClassesAction = function () {\n  return function (dispatch, getState) {\n    try {\n      const ref = firebase().ref(taskRef).orderByChild('schoolYear').equalTo(getSchoolYear(getState()));\n      const onValueChange = ref.on('value', function (snapshot) {\n        const classes = [];\n        snapshot.forEach(function (childSnapshot) {\n          classes.push(childSnapshot.val());\n        });\n        dispatch({\n          type: FETCH_CLASSES,\n          classes\n        });\n      });\n      return function () {\n        return ref.off('value', onValueChange);\n      };\n    } catch (error) {\n      // eslint-disable-next-line\n      console.error(error);\n      return _Promise.resolve();\n    }\n  };\n};\nexport const ADD_CLASSE = 'classes/ADD_CLASSE';\nexport const addClasseAction = function (classe) {\n  return async function (dispatch) {\n    try {\n      await firebase().ref(taskRef + classe._id).set(classe);\n      await dispatch({\n        type: ADD_CLASSE\n      });\n    } catch (error) {\n      // eslint-disable-next-line\n      console.error(error);\n    }\n  };\n};\nexport const DELETE_CLASSE = 'classes/DELETE_CLASSE';\nexport const removeClasseAction = function (classeId) {\n  return async function (dispatch) {\n    try {\n      await firebase().ref(taskRef + classeId).remove();\n      await dispatch({\n        type: DELETE_CLASSE\n      });\n    } catch (error) {\n      // eslint-disable-next-line\n      console.error(error);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}