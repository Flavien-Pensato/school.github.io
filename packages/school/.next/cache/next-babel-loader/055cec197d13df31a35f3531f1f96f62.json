{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { database as firebase } from 'firebase';\nimport XLSX from 'xlsx';\nimport _ from 'lodash';\nimport { getSchoolYear } from '../school/school.selectors';\nimport { uuidv4 } from '../../src/utils';\nconst studentsRef = '/students/';\nexport const FETCH_STUDENTS = 'tasks/FETCH_STUDENTS';\nexport const fetchStudentsAction = function (classeId) {\n  return function (dispatch) {\n    try {\n      const ref = firebase().ref(studentsRef).orderByChild('classeId').equalTo(classeId);\n      const onValueChange = ref.on('value', function (snapshot) {\n        dispatch({\n          type: FETCH_STUDENTS,\n          students: snapshot.val() ? _Object$values(snapshot.val()) : []\n        });\n      });\n      return function () {\n        return ref.off('value', onValueChange);\n      };\n    } catch (error) {\n      console.error(error);\n      return _Promise.resolve();\n    }\n  };\n};\nexport const ADD_STUDENT = 'tasks/ADD_STUDENT';\nexport const addStudentAction = function (student) {\n  return async function (dispatch, getState) {\n    try {\n      const studentId = uuidv4();\n      await firebase().ref(studentsRef + studentId).set(_objectSpread({}, student, {\n        _id: studentId,\n        schoolYear: getSchoolYear(getState())\n      }));\n      await dispatch({\n        type: ADD_STUDENT\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\nexport const REMOVE_STUDENT = 'tasks/REMOVE_STUDENT';\nexport const removeStudentAction = function (studentId) {\n  return async function (dispatch) {\n    try {\n      await firebase().ref(studentsRef + studentId).remove();\n      await dispatch({\n        type: REMOVE_STUDENT\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\nexport const CHANGE_STUDENT = 'tasks/CHANGE_STUDENT';\nexport const changeStudentAction = function (student) {\n  return async function (dispatch) {\n    try {\n      await firebase().ref(studentsRef + student._id).set(student);\n      await dispatch({\n        type: CHANGE_STUDENT\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\nexport const IMPORT_STUDENTS = 'tasks/IMPORT_STUDENTS';\nexport const importStudentsAction = function (pathFile, classeId) {\n  return async function (dispatch) {\n    try {\n      const oFile = XLSX.read(pathFile, {\n        type: 'binary'\n      });\n      const worksheet = oFile.Sheets[oFile.SheetNames[0]];\n\n      const text = _.replace(XLSX.utils.sheet_to_csv(worksheet, {\n        raw: true\n      }), new RegExp(',|\"', 'g'), ' ');\n\n      await _Promise.all(_.split(text, '\\n').map(function (line) {\n        return dispatch(addStudentAction({\n          name: line.trim(),\n          groupe: 0,\n          classeId\n        }));\n      }));\n      await dispatch({\n        type: IMPORT_STUDENTS\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}