{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport slug from 'slug';\nimport { database as firebase } from 'firebase';\nconst taskRef = '/tasks/';\nexport const FETCH_TASKS = 'tasks/FETCH_TASKS';\nexport const fetchTasksAction = function () {\n  return function (dispatch) {\n    try {\n      const ref = firebase().ref(taskRef);\n      const onValueChange = ref.on('value', function (snapshot) {\n        dispatch({\n          type: FETCH_TASKS,\n          tasks: snapshot.val() ? _Object$values(snapshot.val()) : []\n        });\n      });\n      return function () {\n        return ref.off('value', onValueChange);\n      };\n    } catch (error) {\n      // eslint-disable-next-line\n      console.error(error);\n      return _Promise.resolve();\n    }\n  };\n};\nexport const ADD_TASK = 'tasks/ADD_TASK';\nexport const addTaskAction = function (task) {\n  return async function (dispatch) {\n    try {\n      await firebase().ref(taskRef + slug(task._id)).set(task);\n      await dispatch({\n        type: ADD_TASK\n      });\n    } catch (error) {\n      // eslint-disable-next-line\n      console.error(error);\n    }\n  };\n};\nexport const DELETE_TASK = 'tasks/DELETE_TASK';\nexport const removeTaskAction = function (taskId) {\n  return async function (dispatch) {\n    try {\n      await firebase().ref(taskRef + taskId).remove();\n      await dispatch({\n        type: DELETE_TASK\n      });\n    } catch (error) {\n      // eslint-disable-next-line\n      console.error(error);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}